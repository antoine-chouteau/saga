import ollama
import json
import time
import re

# Configuration
themes = [
    {"theme": "Histoire et Civilisations", "subtheme": "Antiquit√©"},
    {"theme": "Histoire et Civilisations", "subtheme": "Moyen √Çge et chevaliers"},
    {"theme": "Histoire et Civilisations", "subtheme": "R√©volutions et grands bouleversements"},
    {"theme": "Histoire et Civilisations", "subtheme": "Guerres mondiales et conflits majeurs"},
    {"theme": "Histoire et Civilisations", "subtheme": "Histoire des inventions et d√©couvertes"},
    {"theme": "Histoire et Civilisations", "subtheme": "Histoire des grandes personnalit√©s"},
    # {"theme": "Sciences et Nature", "subtheme": "Animaux et V√©g√©taux"},
    # {"theme": "Sciences et Nature", "subtheme": "Astronomie et Espace"},
    # {"theme": "Sciences et Nature", "subtheme": "Climat et Ph√©nom√®nes Naturels"},
    # {"theme": "Sciences et Nature", "subtheme": "Math√©matiques et Logique"},
    # {"theme": "Sciences et Nature", "subtheme": "Physique et Chimie"},
    # {"theme": "Sciences et Nature", "subtheme": "M√©decine et Corps Humain"},
    # {"theme": "Culture G√©n√©rale et Soci√©t√©", "subtheme": "Litt√©rature et Philosophie"},
    # {"theme": "Culture G√©n√©rale et Soci√©t√©", "subtheme": "Arts et Peinture"},
    # {"theme": "Culture G√©n√©rale et Soci√©t√©", "subtheme": "Musique et Compositeurs"},
    # {"theme": "Culture G√©n√©rale et Soci√©t√©", "subtheme": "Mythes et L√©gendes"},
    # {"theme": "Culture G√©n√©rale et Soci√©t√©", "subtheme": "Gastronomie et Traditions Culinaires"},
    # {"theme": "Culture G√©n√©rale et Soci√©t√©", "subtheme": "Langues et Expressions"},
    # {"theme": "G√©ographie et Monde", "subtheme": "Villes et Pays"},
    # {"theme": "G√©ographie et Monde", "subtheme": "Fleuves, Montagnes et Oc√©ans"},
    # {"theme": "G√©ographie et Monde", "subtheme": "Monuments et Patrimoines Mondiaux"},
    # {"theme": "G√©ographie et Monde", "subtheme": "Paysages et Climat"},
    # {"theme": "G√©ographie et Monde", "subtheme": "G√©opolitique et Relations Internationales"},
    # {"theme": "G√©ographie et Monde", "subtheme": "Explorateurs et Grandes D√©couvertes"},
    # {"theme": "Sport et Jeux", "subtheme": "Comp√©titions Internationales sportives"},
    # {"theme": "Sport et Jeux", "subtheme": "Jeux Olympiques et Records"},
    # {"theme": "Sport et Jeux", "subtheme": "Sports Extr√™mes et Insolites"},
    # {"theme": "Sport et Jeux", "subtheme": "√âchecs, Puzzles et Casse-T√™tes"},
    # {"theme": "Sport et Jeux", "subtheme": "Jeux de Soci√©t√© et Cartes"},
    # {"theme": "Sport et Jeux", "subtheme": "Athl√®tes L√©gendaires et Champions"},
    # {"theme": "Culture Pop et Divertissement", "subtheme": "Films et Blockbusters"},
    # {"theme": "Culture Pop et Divertissement", "subtheme": "S√©ries et Shows TV"},
    # {"theme": "Culture Pop et Divertissement", "subtheme": "Chansons fran√ßaises et internationales"},
    # {"theme": "Culture Pop et Divertissement", "subtheme": "C√©l√©brit√©s fran√ßaises et internationales"},
    # {"theme": "Culture Pop et Divertissement", "subtheme": "Jeux Vid√©os et leurs univers"},
    # {"theme": "Culture Pop et Divertissement", "subtheme": "Culture Internet"},
]

questions_per_theme = 25
difficulties = ["facile","moyenne"]

# Store generated questions to prevent duplicates
unique_questions = set()
quiz_questions = []
history = [{"role": "system", "content": "Tu es un g√©n√©rateur de quiz en fran√ßais. Trouve des questions uniques. R√©ponds toujours en fran√ßais."}]

# Regular expression to extract structured data
pattern = re.compile(
    r"Question\s*:\s*(.*?)\n"
    r"R√©ponses\s*:\s*\[(.*?)\]\n"
    r"Bonne r√©ponse\s*:\s*(.*?)\n"
    r"Explication\s*:\s*(.*)"
)

# Generate questions
question_id = 1
for difficulty in difficulties:
    for item in themes:
        theme = item["theme"]
        subtheme = item["subtheme"]
        
        print(f"üìö G√©n√©ration de {questions_per_theme} questions pour {theme} - {subtheme}...")
        
        for _ in range(questions_per_theme):
            prompt = (
                f"G√©n√®re une question de quiz sur le th√®me '{theme}' et le sous-th√®me '{subtheme}', avec une difficult√© '{difficulty}'.\n"
                f"Sois absolument certain que la r√©ponse soit correcte. Ne r√©ponds rien d'autre que le JSON au format suivant :\n"
                f"{{\n"
                f'    "question": "Texte de la question",\n'
                f'    "answers": ["R√©ponse 1", "R√©ponse 2", "R√©ponse 3", "R√©ponse 4", "R√©ponse 5"],\n'
                f'    "correct": "R√©ponse correcte",\n'
                f'    "explanation": "Explication d√©taill√©e"\n'
                f"}}"
            )

            # Maintain conversation history
            history.append({"role": "user", "content": prompt})
            if len(history) > 10:  
                history = history[-10:]  # Keep only the last 10 messages

            # Get response from Mistral
            response = ollama.chat(model="phi4", messages=history)
            response_text = "{"+response["message"]["content"].strip().split("{")[-1].strip().split("}")[0].strip()+"}"
            print("üí¨", response_text)

            # Ensure uniqueness
            if response_text in unique_questions:
                print("‚ö†Ô∏è Question en double d√©tect√©e, en g√©n√©rant une nouvelle...")
                continue  # Skip and retry
            
            unique_questions.add(response_text)
            history.append({"role": "assistant", "content": response_text})

            # Try to parse JSON response
            try:
                question_data = json.loads(response_text)
                quiz_entry = {
                    "id": question_id,
                    "theme": theme,
                    "subtheme": subtheme,
                    "question": question_data["question"],
                    "answers": question_data["answers"],
                    "correct": question_data["correct"],
                    "difficulty": difficulty,
                    "explanation": question_data["explanation"]
                }
                quiz_questions.append(quiz_entry)
                question_id += 1
            except json.JSONDecodeError:
                print("‚ö†Ô∏è Erreur JSON, r√©g√©n√©ration de la question...")
                continue  # Retry if JSON is invalid

            time.sleep(1)  # Avoid overwhelming the API

    # Save to JSON file
    with open("quiz_questions_"+difficulty+".json", "w", encoding="utf-8") as f:
        json.dump(quiz_questions, f, indent=4, ensure_ascii=False)

    print("‚úÖ G√©n√©ration termin√©e ! Les questions ont √©t√© enregistr√©es dans 'quiz_questions"+difficulty+".json'.")

